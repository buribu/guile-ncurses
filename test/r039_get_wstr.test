;;;; -*- Mode: scheme; coding: utf-8 -*-
;;;; r039_getstr.test --- test suite for curses's get_wstr

;; Copyright 2009, 2010 Free Software Foundation, Inc.

;; This file is part of Guile-Ncurses.

;; Guile-Ncurses is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; Guile-Ncurses is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with Guile-Ncurses.  If not, see
;; <http://www.gnu.org/licenses/>.

(use-modules (test lib)
             (test lib2)
             (ncurses curses))

(define test (curses-test-start))

(define win (initscr))
(set! *sleep* #f)

(setlocale LC_ALL "")

;; Should be able to get strings from the keyboard

(with-test-prefix
 "ungetch/getnstr"

 (pass-if "HI"
          (begin
            (erase win)
            (refresh win)
            (noecho!)
            (let ((str "HI\n"))
              (map (lambda (c)
                     (addstr win (format #f "ungetch: ~s\n" c))
                     (ungetch c))
                   (string->list (string-reverse str)))
              (let* ((str2 (getnstr win 3))
                     (pass (string=? str2 "HI")))
                (addstr win (format #f "getnstr: ~s\n" str2))
                (if pass (addstr win "PASS") (addstr win "FAIL"))
                (refresh win)
                (maybe-sleep 3)
                pass))))

 (pass-if "ĤĨ"
          (begin
            (if (not (fluid-ref %default-port-encoding))
                (throw 'unresolved))
            (if (not (string-contains-ci (fluid-ref %default-port-encoding) "utf"))
                (throw 'unresolved))
            (erase win)
            (refresh win)
            (noecho!)
            (let ((str "ĤĨ\n"))
              (map (lambda (c)
                     (addstr win (format #f "ungetch: ~s\n" c))
                     (ungetch c))
                   (string->list (string-reverse str)))
              (let* ((str2 (getnstr win 3))
                     (pass (string=? str2 "ĤĨ")))
                (addstr win (format #f "getnstr: ~s\n" str2))
                (if pass (addstr win "PASS") (addstr win "FAIL"))
                (refresh win)
                (sleep 3)
                ;; This functionality is broken in ncurses prior to
                ;; 20091010.
                pass))))

 (pass-if "getnstr #:y #:x (wide)"
          (begin
            (if (not (fluid-ref %default-port-encoding))
                (throw 'unresolved))
            (if (not (string-contains-ci (fluid-ref %default-port-encoding) "utf"))
                (throw 'unresolved))
            (erase win)
            (refresh win)
            (ungetch #\nl)
            (addstr win (format #f "ungetch: ~s\n" #\nl))
            (ungetch #\P)
            (addstr win (format #f "ungetch: ~s\n" #\P))
            (ungetch #\Ĩ)
            (addstr win (format #f "ungetch: ~s\n" #\Ĩ))
            (ungetch #\Ĥ)
            (addstr win (format #f "ungetch: ~s\n" #\Ĥ))
            (let* ((s1 (getnstr win 2 #:y 6 #:x 1))
                   (pass (string=? s1 "ĤĨ")))
              (begin
                (addstr win (format #f "getnstr: ~s\n" s1))
                (if pass (addstr win "PASS") (addstr win "FAIL"))
                (refresh win)
                (maybe-sleep 5)
                ;; This functionality was broken in ncurses.  Tested
                ;; bad with ncurses-5.7-20090808.  Tested OK with
                ;; 5.7.20100130.
                pass)))))


(endwin)
(curses-test-end test "r039_get_wstr.out")
