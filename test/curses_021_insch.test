;;;; -*- Mode: scheme; -*-
;;;; curses_021_insch.test --- test suite for curse's insert character
;;;; functions

;; Copyright 2009, 2010 Free Software Foundation, Inc.

;; This file is part of Guile-Ncurses.

;; Guile-Ncurses is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; Guile-Ncurses is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with Guile-Ncurses.  If not, see
;; <http://www.gnu.org/licenses/>.


(use-modules (test lib)
             (test lib2)
             (ncurses curses)
             (srfi srfi-1))

(define test (curses-test-start))

(define win (initscr))

(define (mvinch y x)
  (inch win #:y y #:x x))

;; Should be able to insert characters
(with-test-prefix
 "insch"

 (pass-if "insch"
          (begin
            (clear win)
            (refresh win)
            (addstr win "xxx" #:y 0 #:x 0)
            (move win 0 0)
            (insch win (normal #\z))
            (refresh win)
            (let ((x1 (mvinch 0 0))
                  (x2 (mvinch 0 1)))
              (and
               (xchar-equal? x1 (normal #\z))
               (xchar-equal? x2 (normal #\x))))))

 (pass-if "insch #:y #:x"
          (begin
            (clear win)
            (refresh win)
            (addstr win "xxx" #:y 0 #:x 0)
            (insch win (normal #\z) #:y 0 #:x 0)
            (let ((x1 (mvinch 0 0))
                  (x2 (mvinch 0 1)))
              (and
               (xchar-equal? x1 (normal #\z))
               (xchar-equal? x2 (normal #\x)))))))
(endwin)

(curses-test-end test "curses_021_insch.out")
