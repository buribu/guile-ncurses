;;;; -*- Mode: scheme; -*-
;;;; f001_new_menu.test --- test suite for curses's menu functions

;; Copyright 2009, 2010 Free Software Foundation, Inc.

;; This file is part of Guile-Ncurses.

;; Guile-Ncurses is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; Guile-Ncurses is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with Guile-Ncurses.  If not, see
;; <http://www.gnu.org/licenses/>.

(use-modules (test lib)
             (test lib2)
             (srfi srfi-1)
             (ncurses curses)
             (ncurses menu))

(define test (curses-test-start))
(set! *sleep* #f)
(define win (initscr))

;; Should be able to make a menu
(with-test-prefix
 "new-menu"

 (pass-if-exception "no items" exception:wrong-type-arg
                    (let ((f (new-menu '())))
                      (menu? f)))

 (pass-if "one item"
          (let* ((item (new-item "item1" "description1"))
                 (m (new-menu (list item))))
            (post-menu m)
            (refresh win)
            (maybe-sleep 1)
            (unpost-menu m)
            (refresh win)
            (menu? m)))

  (pass-if "items can't be used in more than one menu"
	   (let* ((item (new-item "item1" "description1"))
		  (m1 (new-menu (list item)))
		  (m2 (false-if-exception (new-menu (list item)))))
	     (not (menu? m2))))

  )

(endwin)

(curses-test-end test "m001_new_menu.out")
