;;;; -*- Mode: scheme; -*-
;;;; r004_addchstr.test --- test suite for curses's addchstr functions

(use-modules (test lib)
	     (test lib2)
	     (srfi srfi-1)
	     (gucu curses))

(define test (curses-test-start))

(define mainwin (initscr))

(define hello (normal "hello"))
(define he (normal "he"))
(define hello-bold (bold "hello"))
(define he-bold (bold "he"))

(with-test-prefix "addchstr"
		  
		  (pass-if "addchstr"
			   (begin
			     (clear mainwin)
			     (move mainwin 0 0)
			     (addchstr mainwin hello)
			     (refresh mainwin)
			     (let ((w2 (inchstr mainwin #:y 0 #:x 0 #:n 10)))
			       (lset= equal? hello (list-head w2 (length hello))))))

		  (pass-if "addchstr #:n"
			   (begin
			     (clear mainwin)
			     (move mainwin 0 0)
			     (addchstr mainwin hello #:n 2)
			     (refresh mainwin)
			     (let ((w2 (inchstr mainwin #:y 0 #:x 0 #:n 10)))
			       (lset= equal? he (list-head w2 (length he))))))

		  (pass-if "addchstr #:y #:x"
			   (begin
			     (clear mainwin)
			     (addchstr mainwin hello-bold #:y 1 #:x 0)
			     (refresh mainwin)
			     (let ((x2 (inchstr mainwin #:y 1 #:x 0 #:n 10)))
			       (equal? hello-bold (list-head x2 (length hello-bold))))))

		  (pass-if "addchstr #:y #:x #:n"
			   (begin
			     (clear mainwin)
			     (addchstr mainwin hello-bold #:y 1 #:x 0 #:n 2)
			     (refresh mainwin)
			     (let ((x2 (inchstr mainwin #:y 1 #:x 0 #:n 10)))
			       (equal? he-bold (list-head x2 (length he-bold)))))))

(endwin)

(curses-test-end test "r004_addchstr.out")