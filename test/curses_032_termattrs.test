;;;; -*- Mode: scheme; -*-
;;;; curses_032_termattrs.test --- test suite for curses's term attrs


;; Copyright 2009, 2010 Free Software Foundation, Inc.

;; This file is part of Guile-Ncurses.

;; Guile-Ncurses is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; Guile-Ncurses is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with Guile-Ncurses.  If not, see
;; <http://www.gnu.org/licenses/>.

(use-modules (test lib)
             (test lib2)
             (ncurses curses)
             (ice-9 format)
             (srfi srfi-1)
             (srfi srfi-13))  ; for Guile 1.6.x's string=

(define test (curses-test-start))

(setenv "TERM" "xterm")
(define win (initscr))
(start-color!)
(set! *sleep* #f)

;; Should be able to get term attributes
(with-test-prefix
 "termattrs"

 (pass-if "baudrate"
          (begin
            (clear win)
            (let ((b (baudrate)))
              (addstr win (format #f "Baudrate: ~a" b))
              (refresh win)
              (maybe-sleep 1)
              (endwin)
              (eqv? b 38400))))

 ;; Not sure what the correct answer for
 ;; erasechar should be.  Gnu/Linux xterm gives
 ;; #\del.  Cygwin gives ERR.
 (pass-if "erasechar"
          (begin
            (clear win)
            (move win 0 0)
            (let ((c (erasechar)))
              (addstr win (format #f "Erasechar: ~s" c))
              (refresh win)
              (maybe-sleep 1)
              (eqv? c #\del))))

 ;; Not sure what the correct answer for killchar
 ;; should be.  Gnu/Linux xterm give #\nak. Cygwin
 ;; gives ERR
 (pass-if "killchar"
          (begin
            (clear win)
            (move win 0 0)
            (let ((c (killchar)))
              (addstr win (format #f "Killchar: ~s" c))
              (refresh win)
              (maybe-sleep 1)
              (eqv? c #\nak))))

 (pass-if "has-ic?"
          (begin
            (clear win)
            (move win 0 0)
            (let ((h (has-ic?)))
              (addstr win (format #f "Has IC: ~a" h))
              (refresh win)
              (maybe-sleep 1)
              (eqv? h #t))))

 (pass-if "has-il?"
          (begin
            (clear win)
            (move win 0 0)
            (let ((h (has-il?)))
              (addstr win (format #f "Has IL: ~a" h))
              (refresh win)
              (maybe-sleep 1)
              (eqv? h #t))))

 (pass-if "longname"
          (begin
            (clear win)
            (move win 0 0)
            (let ((c (longname)))
              (addstr win (format #f "Long Terminal Name: ~a" c))
              (refresh win)
              (maybe-sleep 1)
              (not (not (string= c "xterm"
                                 0
                                 (min (string-length c)
                                      (string-length "xterm"))
                                 0
                                 (string-length "xterm")))))))

 (pass-if "termname"
          (begin
            (clear win)
            (move win 0 0)
            (let ((c (termname)))
              (addstr win (format #f "Terminal Name: ~a" c))
              (refresh win)
              (maybe-sleep 1)
              (not (not (string= c "xterm" 0 4 0 4))))))

 (pass-if "term-attrs"
          (begin
            (clear win)
            (let ((ta (term-attrs))
                  (ta2 (logior
                        A_ALTCHARSET
                        A_BLINK
                        A_BOLD
                        ;; A_DIM
                        A_COLOR
                        A_INVIS
                        ;; A_PROTECT
                        A_REVERSE
                        A_STANDOUT
                        A_UNDERLINE)))
              (move win 0 0)
              (addchstr win (underline-on (bold-on "Terminal Capabilities")))
              (move win 1 0)
              (addstr win (format #f "this term ~32,'0b~%" ta))
              (addstr win (format #f "  PROTECT ~32,'0b~%" A_PROTECT))
              (addstr win (format #f "INVISIBLE ~32,'0b~%" A_INVIS))
              (addstr win (format #f "      ALT ~32,'0b~%" A_ALTCHARSET))
              (addstr win (format #f "     BOLD ~32,'0b~%" A_BOLD))
              (addstr win (format #f "      DIM ~32,'0b~%" A_DIM))
              (addstr win (format #f "    BLINK ~32,'0b~%" A_BLINK))
              (addstr win (format #f "  REVERSE ~32,'0b~%" A_REVERSE))
              (addstr win (format #f "UNDERLINE ~32,'0b~%" A_UNDERLINE))
              (addstr win (format #f " STANDOUT ~32,'0b~%" A_STANDOUT))
              (addstr win (format #f "    COLOR ~32,'0b~%" A_COLOR))
              (addstr win (format #f "std xterm ~32,'0b~%" ta2))
              (refresh win)
              (maybe-sleep 10)
              (eqv? ta ta2)))))
(endwin)

(curses-test-end test "curses_032_termattrs.out")
