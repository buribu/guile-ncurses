;;;; -*- Mode: scheme; -*-
;;;; curses_032_termattrs.test --- test suite for curses's term attrs


;; Copyright 2009, 2010, 2011 Free Software Foundation, Inc.

;; This file is part of Guile-Ncurses.

;; Guile-Ncurses is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; Guile-Ncurses is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with Guile-Ncurses.  If not, see
;; <http://www.gnu.org/licenses/>.

(use-modules (test lib)
             (test lib2)
             (ncurses curses)
             (ice-9 format)
             (srfi srfi-1)
             (srfi srfi-13))  ; for Guile 1.6.x's string=

(define test (curses-test-start))

(define win (initscr))
(start-color!)
(set! *sleep* #f)

(define expected-baudrate 38400)
(define expected-erasechar #\del)
(define expected-killchar #\nak)
(define expected-has-ic #t)
(define expected-has-il #t)

;; Should be able to get term attributes
(with-test-prefix
 "termattrs"
 
 ;; baudrate gets its data from the terminal line settings, I think.
 ;; So there is no correct response.  I get 38400 when called 
 ;; interactively in an xterm and 0 when called within nohup.
 (pass-if "baudrate"
          (begin
            (clear win)
            (let ((b (baudrate)))
              (endwin)
	      ()
              (format #t "Baudrate: ~a (expected ~a)~%" b expected-baudrate)
              (maybe-sleep 1)
              (eqv? b expected-baudrate)
	      (throw 'untested))))

 ;; erasechar and killchar get their data from the terminal line
 ;; settings, so it isn't possible to say what the 'correct' response
 ;; should be, yet.  (In the future, we can compare this to the
 ;; response from the termios functions.)  
 ;; Gnu/Linux xterm gives #\del. Cygwin gives ERR.
 (pass-if "erasechar"
          (begin
            (clear win)
            (let ((c (erasechar)))
              (endwin)
              ;; (format #t "Erasechar: ~s (expected ~s)~%" c expected-erasechar)
              ;; (maybe-sleep 1)
              ;; (eqv? c expected-erasechar)
	      (throw 'unresolved))))
 
 ;; erasechar and killchar get their data from the terminal line
 ;; settings, so it isn't possible to say what the 'correct' response
 ;; should be.  Gnu/Linux xterm give #\nak. Cygwin gives ERR
 (pass-if "killchar"
          (begin
            (clear win)
            (let ((c (killchar)))
              (endwin)
              ;; (format #t "Killchar: ~s (expected ~s)~%" c expected-killchar)
              ;; (maybe-sleep 1)
              ;; (eqv? c expected-killchar)
	      (throw 'unresolved))))

 (pass-if "has-ic?"
          (begin
            (clear win)
            (let ((h (has-ic?)))
              (endwin)
              ;; (format #t "Has IC: ~a (expected ~a)~%" h expected-has-ic)
              (maybe-sleep 1)
              (eqv? h expected-has-ic))))

 (pass-if "has-il?"
          (begin
            (clear win)
            (move win 0 0)
            (let ((h (has-il?)))
              (endwin)
              ;; (format #t "Has IL: ~a (expected ~a)~%" h expected-has-il)
              (maybe-sleep 1)
              (eqv? h expected-has-il))))

 (pass-if "longname"
          (begin
            (clear win)
            (let ((c (longname)))
              (endwin)
              (format #t "Long Terminal Name: ~a~%" c)
              (maybe-sleep 1)
              (not (not (string= c "xterm"
                                 0
                                 (min (string-length c)
                                      (string-length "xterm"))
                                 0
                                 (string-length "xterm")))))))

 (pass-if "termname"
          (begin
            (clear win)
            (let ((c (termname)))
              (endwin)
              (format #t "Terminal Name: ~a~%" c)
              (maybe-sleep 1)
              (not (not (string= c "testxterm" 0 4 0 4))))))
 
 (pass-if "term-attrs"
          (begin
            (clear win)
            (let ((ta (term-attrs))
                  (ta2 (logior
                        A_ALTCHARSET
                        A_BLINK
                        A_BOLD
                        ;; A_DIM
                        A_COLOR
                        A_INVIS
                        ;; A_PROTECT
                        A_REVERSE
                        A_STANDOUT
                        A_UNDERLINE)))
              (endwin)
              ;; (format #t "~%")
              ;; (format #t "Terminal Capabilities Bit Mask~%")
              ;; (format #t "------------------------------~%")
              ;; (format #t "this term ~32,'0b~%" ta)
              ;; (format #t "  PROTECT ~32,'0b~%" A_PROTECT)
              ;; (format #t "INVISIBLE ~32,'0b~%" A_INVIS)
              ;; (format #t "      ALT ~32,'0b~%" A_ALTCHARSET)
              ;; (format #t "     BOLD ~32,'0b~%" A_BOLD)
              ;; (format #t "      DIM ~32,'0b~%" A_DIM)
              ;; (format #t "    BLINK ~32,'0b~%" A_BLINK)
              ;; (format #t "  REVERSE ~32,'0b~%" A_REVERSE)
              ;; (format #t "UNDERLINE ~32,'0b~%" A_UNDERLINE)
              ;; (format #t " STANDOUT ~32,'0b~%" A_STANDOUT)
              ;; (format #t "    COLOR ~32,'0b~%" A_COLOR)
              ;; (format #t "std xterm ~32,'0b~%" ta2)
              ;; (maybe-sleep 10)
              (eqv? ta ta2)))))

(curses-test-end test "curses_032_termattrs.out")
