;;;; -*- Mode: scheme; -*-
;;;; curses_007_addstr.test --- test suite for curses's addstr

;; Copyright 2009, 2010 Free Software Foundation, Inc.

;; This file is part of Guile-Ncurses.

;; Guile-Ncurses is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; Guile-Ncurses is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with Guile-Ncurses.  If not, see
;; <http://www.gnu.org/licenses/>.

(use-modules (test lib)
             (test lib2)
             (srfi srfi-1)
             (srfi srfi-13) ; string-take is included by default in
                            ; guile 1.8.x but only appears in srfi-13
                            ; in guile 1.6.x
             (ncurses curses))

(define test (curses-test-start))

(define mainwin (initscr))

(with-test-prefix
 "addstr"

 (pass-if "addstr"
          (begin
            (clear mainwin)
            (move mainwin 0 0)
            (addstr mainwin "hello")
            (refresh mainwin)
            (let ((w2 (instr mainwin #:y 0 #:x 0)))
              (string=? "hello" (string-take w2 (string-length "hello"))))))

 (pass-if "addstr #:n"
          (begin
            (clear mainwin)
            (move mainwin 0 0)
            (addstr mainwin "hello" #:n 2)
            (refresh mainwin)
            (let ((w2 (instr mainwin #:y 0 #:x 0)))
              (string=? "he" (string-take w2 (string-length "he"))))))

 (pass-if "addstr #:y #:x"
          (begin
            (clear mainwin)
            (attr-on! mainwin A_BOLD)
            (addstr mainwin "bold" #:y 1 #:x 0)
            (attr-off! mainwin A_BOLD)
            (refresh mainwin)
            (let ((x2 (instr mainwin #:y 1 #:x 0)))
              (string=? "bold" (string-take x2 (string-length "bold"))))))

 (pass-if "addstr #:y #:x #:n"
          (begin
            (clear mainwin)
            (attr-on! mainwin A_BOLD)
            (addstr mainwin "bold" #:y 1 #:x 0 #:n 2)
            (attr-off! mainwin A_BOLD)
            (refresh mainwin)
            (let ((x2 (instr mainwin #:y 1 #:x 0)))
              (string=? "bo" (string-take x2 (string-length "bo")))))))

(endwin)

(curses-test-end test "curses_007_addstr.out")
