;;;; -*- Mode: scheme; -*-

;;;; p001_panel.test --- 

(use-modules (test lib)
	     (test lib2)
	     (srfi srfi-1)
	     (gucu curses)
	     (gucu panel))

(define test (curses-test-start))

(define mainwin (initscr))

;; Should be able to make a panel
(with-test-prefix 
 "panel"

 (pass-if "new-panel"
	  (let* ((win1 (newwin 5 10 5 5))
		 (win2 (newwin 5 10 7 7))
		 (panel1 (new-panel win1))
		 (panel2 (new-panel win2)))
	    (box win1 (acs-vline) (acs-hline))
	    (addstr win1 "box 1"  #:y 1 #:x 1)
	    (box win2 (acs-vline) (acs-hline))
	    (addstr win2 "box 2" #:y 1 #:x 1)
	    (update-panels)
	    (doupdate)
	    (sleep 1)

	    (addstr win1 "bottom" #:y 1 #:x 1)
	    (addstr win2 "box 2 " #:y 1 #:x 1)
	    (bottom-panel panel1)
	    (update-panels)
	    (doupdate)
	    (sleep 1)

	    (addstr win1 "top   " #:y 1 #:x 1)
	    (addstr win2 "box 2 " #:y 1 #:x 1)
	    (top-panel panel1)
	    (update-panels)
	    (doupdate)
	    (sleep 1)

	    (addstr win1 "hide   " #:y 1 #:x 1)
	    (addstr win2 "box 2  " #:y 1 #:x 1)
	    (hide-panel panel1)
	    (update-panels)
	    (doupdate)
	    (sleep 1)

	    (addstr win1 "show   " #:y 1 #:x 1)
	    (addstr win2 "box 2  " #:y 1 #:x 1)
	    (show-panel panel1)
	    (update-panels)
	    (doupdate)
	    (sleep 1)

	    (addstr win1 "move   " #:y 1 #:x 1)
	    (addstr win2 "box 2  " #:y 1 #:x 1)
	    (move-panel panel1 2 2)
	    (update-panels)
	    (doupdate)
	    (sleep 1)

	    (addstr (panel-window panel1) "pwin1  " #:y 1 #:x 1)
	    (addstr (panel-window panel2) "pwin2  " #:y 1 #:x 1)
	    (move-panel panel1 2 2)
	    (update-panels)
	    (doupdate)
	    (sleep 1)

	    (addstr win1 "delete " #:y 1 #:x 1)
	    (addstr win2 "box 2  " #:y 1 #:x 1)
	    (del-panel panel1)
	    (update-panels)
	    (doupdate)
	    (sleep 1)

	    *unspecified*)))

(endwin)

(curses-test-end test "p001_panel.out")
