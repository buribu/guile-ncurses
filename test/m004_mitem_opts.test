;;;; -*- Mode: scheme; -*-
;;;; m004_mitem_opts.test --- set-item-opts, item-opts-on, item-opts-off, item-opts

;; Copyright 2009, 2010 Free Software Foundation, Inc.

;; This file is part of Guile-Ncurses.

;; Guile-Ncurses is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; Guile-Ncurses is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with Guile-Ncurses.  If not, see
;; <http://www.gnu.org/licenses/>.

(use-modules (test lib)
             (test lib2)
             (srfi srfi-1)
             (ncurses curses)
             (ncurses menu))

(define test (curses-test-start))

(define win (initscr))

;; Should be able to make a menu
(with-test-prefix "mitem-opts"

                  (pass-if "set-item-opts"
                           (let ((item1 (new-item "item1" "description1")))
                             (set-item-opts! item1 0)
                             (equal? (item-opts item1) 0)))

                  (pass-if "item-opts-on"
                           (let ((item1 (new-item "item1" "description1")))
                             (set-item-opts! item1 0)
                             (item-opts-on! item1 O_SELECTABLE)
                             (equal? (item-opts item1) O_SELECTABLE)))

                  (pass-if "item-opts-off"
                           (let ((item1 (new-item "item1" "description1")))
                             (set-item-opts! item1 O_SELECTABLE)
                             (item-opts-off! item1 O_SELECTABLE)
                             (equal? (item-opts item1) 0))))

(endwin)

(curses-test-end test "m004_mitem_opts.out")
