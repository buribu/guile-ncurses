;;;; -*- Mode: scheme; -*-
;;;; r012_deleteln.test --- test suite for curses's line deletion functions

(use-modules (test lib)
	     (test lib2)
	     (srfi srfi-1)
	     (gucu curses))


(define test (curses-test-start))

(define win (initscr))
(define (mvinch y x)
  (inch win #:y y #:x x))

(with-test-prefix "deleteln"
		  
		  (pass-if "deleteln"
			   (begin
			     (clear win)
			     (addstr win "aaa" #:y 0 #:x 0)
			     (addstr win "bbb" #:y 1 #:x 0)
			     (addstr win "ccc" #:y 2 #:x 0)
			     (move win 1 0)
			     (deleteln win)
			     (refresh win)
			     (let ((x1 (mvinch 0 0))
				   (x2 (mvinch 2 0)))
			       (and
				(equal? x1 (normal #\a))
				(equal? x2 (normal #\sp))))))

		  (pass-if "insdelln -1"
			   (begin
			     (clear win)
			     (addstr win "aaa" #:y 0 #:x 0)
			     (addstr win "bbb" #:y 1 #:x 0)
			     (addstr win "ccc" #:y 2 #:x 0)
			     (move win 1 0)
			     (insdelln win -1)
			     (refresh win)
			     (let ((x1 (mvinch 0 0))
				   (x2 (mvinch 2 0)))
			       (and
				(equal? x1 (normal #\a))
				(equal? x2 (normal #\sp))))))

		  (pass-if "insertln"
			   (begin
			     (clear win)
			     (addstr win "aaa" #:y 0 #:x 0)
			     (addstr win "bbb" #:y 1 #:x 0)
			     (addstr win "ccc" #:y 2 #:x 0)
			     (move win 1 0)
			     (insertln win)
			     (refresh win)
			     (let ((x1 (mvinch 0 0))
				   (x2 (mvinch 2 0)))
			       (and
				(equal? x1 (normal #\a))
				(equal? x2 (normal #\b))))))

		  (pass-if "insdelln +1"
			   (begin
			     (clear win)
			     (addstr win "aaa" #:y 0 #:x 0)
			     (addstr win "bbb" #:y 1 #:x 0)
			     (addstr win "ccc" #:y 2 #:x 0)
			     (move win 1 0)
			     (insdelln win 1)
			     (refresh win)
			     (let ((x1 (mvinch 0 0))
				   (x2 (mvinch 2 0)))
			       (and
				(equal? x1 (normal #\a))
				(equal? x2 (normal #\b)))))))
(endwin)

(curses-test-end test "r012_deleteln.out")
