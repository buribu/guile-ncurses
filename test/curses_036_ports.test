;;;; -*- Mode: scheme; -*-
;;;; curses_036_ports.test --- test suite for newterm


;; Copyright 2009, 2010 Free Software Foundation, Inc.

;; This file is part of Guile-Ncurses.

;; Guile-Ncurses is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; Guile-Ncurses is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with Guile-Ncurses.  If not, see
;; <http://www.gnu.org/licenses/>.

(use-modules (test lib)
             (test lib2)
             (ncurses curses)
             (ice-9 format)
             (srfi srfi-1))

(define test (curses-test-start))

(define scr #f)
(define win #f)
(define scr2 #f)
(define win2 #f)
(define tmpl #f)
(define input-port #f)
(define output-port #f)

(if (defined? 'newterm)
    (begin

      (set! tmpl "gucuXXXXXX")
      (set! input-port (mkstemp! tmpl))
      (set! output-port (open-output-string))

      (with-test-prefix
       "newterm"
       (pass-if "create"
                (begin
                  (set! scr (newterm "xterm" output-port input-port))
                  (screen? scr)))

       (pass-if "stdscr"
                (begin
                  (set! win (stdscr))
                  (window? win)))

       (pass-if "addstr"
                (begin
                  (addstr win "Blammo!")
                  #t))

       (pass-if "refresh"
                (begin
                  (refresh win)
                  #t))

       (pass-if "nodelay!"
                (begin
                  (nodelay! win #t)
                  #t))

       ;;(pass-if "getch"
       ;;         (not (not (getch win))))
       )
      (with-test-prefix
       "set-term"
       (pass-if "switch"
                (set! scr2 (newterm "xterm" output-port input-port))
                (set-term scr2)
                (set! win2 (stdscr))
                (and
                 (screen? scr2)
                 (window? win2)
                 (not (eq? win win2))))

       ;; Should be false because it should not be possible to restore
       ;; the "shell mode" of a port
       (pass-if "endwin"
                (let* ((x1 (endwin))
                       (x2 (window? win2)))
                  (and (not x1) x2)))

       (pass-if "delscreen"
                (not (not (false-if-exception (delscreen scr2))))))

      (endwin)
      (close input-port)
      (delete-file tmpl)))

(curses-test-end test "curses_036_ports.out")
