;;;; -*- Mode: scheme; -*-
;;;; curses_010_bkgd.test --- test suite for curses's background
;;;; functions

;; Copyright 2009, 2010 Free Software Foundation, Inc.

;; This file is part of Guile-Ncurses.

;; Guile-Ncurses is free software: you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation, either version 3 of
;; the License, or (at your option) any later version.

;; Guile-Ncurses is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; Lesser General Public License for more details.

;; You should have received a copy of the GNU Lesser General Public
;; License along with Guile-Ncurses.  If not, see
;; <http://www.gnu.org/licenses/>.


(use-modules (test lib)
             (test lib2)
             (srfi srfi-1)
             (ncurses curses))


(define test (curses-test-start))

;; Requires a terminal that can do color
(setenv "TERM" "xterm")

(set! *sleep* #f)

(define win (initscr))
(start-color!)
(init-pair! 1 COLOR_BLACK COLOR_RED)

(clear win)
(standend! win)

(with-test-prefix
 "bkgd"

 (pass-if "bkgd"
          (begin
            (addstr win "This is bold and has periods as background"
                    #:y 0 #:x 0)
            (bkgd win (bold #\.))
            (addstr win "This is bold has periods as background"
                    #:y 1 #:x 0)
            (refresh win)
            (maybe-sleep 2)
            (let ((x1 (inch win #:y 0 #:x 4)) ; Loc of space between
                                              ; "This" and "is"
                  (x2 (inch win #:y 1 #:x 4)))
              (begin
                (bkgd win (normal #\space)) ; clear bkgd
                (clear win)
                (refresh win)
                (and
                 (xchar-equal? (bold #\.) x1)
                 (xchar-equal? (bold #\.) x2))))))

 (pass-if "bkgdset"
          (begin
            (standend! win)
            (addstr win "This has default colors and spaces as background"
                    #:y 0 #:x 0)
            (bkgdset! win (color 1 (dim #\+)))
            (addstr win "This is black on red and has plus signs as background"
                    #:y 1 #:x 0)
            (refresh win)
            (maybe-sleep 2)
            (let ((x1 (inch win #:y 0 #:x 4))
                  (x2 (inch win #:y 1 #:x 4)))
              (begin
                (bkgd win (normal #\space)) ; clear bkgd
                (clear win)
                (refresh win)
                (and
                 (xchar-equal? (normal #\space) x1)
                 (xchar-equal? (color 1 (dim #\+)) x2)))))))

(endwin)

(curses-test-end test "curses_010_bkgd.out")
